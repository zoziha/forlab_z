#:include "common.fypp"
submodule(forlab_linalg) forlab_linalg_seq

    implicit none

contains

    #:set RI_KINDS_TYPES = REAL_KINDS_TYPES + INT_KINDS_TYPES
    #:for k1, t1 in REAL_KINDS_TYPES
    !> Make a seq of `${t1}$` type
    module procedure seq_${t1[0]}$_${k1}$

        integer :: i

        if (start <= end) then
            result = start + by*real([(i-1,i=1,size(result))],${k1}$) 
        else
            result = start - by*real([(i-1,i=1,size(result))],${k1}$) 
        end if

    end procedure seq_${t1[0]}$_${k1}$
    #:endfor

    #:for k1, t1 in INT_KINDS_TYPES
    !> Make a seq of `${t1}$` type
    pure module function seq_${t1[0]}$_${k1}$(start, end, by) result(result)
        implicit none
        ${t1}$, intent(in) :: start, end, by
        ${t1}$ :: result(max(int(abs(start - end)/by + 1), 0))

        integer :: i

        if (start <= end) then
            result = [(i, i=start, end, by)]
        else
            result = [(i, i=start, end, -by)] 
        end if

    end function seq_${t1[0]}$_${k1}$
    #:endfor

end submodule forlab_linalg_seq
